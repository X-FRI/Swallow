# this is the build file for project swallow
# it is autogenerated by the xmake build system.
# do not edit by hand.

# project
cmake_minimum_required(VERSION 3.15.0)
cmake_policy(SET CMP0091 NEW)
set(CMAKE_C_COMPILER "/usr/bin/x86_64-w64-mingw32-gcc")
set(CMAKE_CXX_COMPILER "/usr/bin/x86_64-w64-mingw32-g++")
project(swallow VERSION 0.0.1 LANGUAGES CXX)

# target
add_executable(swa "")
set_target_properties(swa PROPERTIES OUTPUT_NAME "swa")
set_target_properties(swa PROPERTIES RUNTIME_OUTPUT_DIRECTORY "${CMAKE_SOURCE_DIR}/build/linux/x86_64/release")
add_dependencies(swa swc swi)
target_include_directories(swa PRIVATE
    compiler
)
target_compile_options(swa PRIVATE
    $<$<COMPILE_LANGUAGE:C>:-m64>
    $<$<COMPILE_LANGUAGE:CXX>:-m64>
    $<$<COMPILE_LANGUAGE:C>:-DNDEBUG>
    $<$<COMPILE_LANGUAGE:CXX>:-DNDEBUG>
)
set_target_properties(swa PROPERTIES CXX_EXTENSIONS OFF)
target_compile_features(swa PRIVATE cxx_std_20)
if(MSVC)
    target_compile_options(swa PRIVATE $<$<CONFIG:Release>:-O2>)
else()
    target_compile_options(swa PRIVATE -O3)
endif()
if(MSVC)
else()
    target_compile_options(swa PRIVATE -fvisibility=hidden)
endif()
if(MSVC)
    set_property(TARGET swa PROPERTY
        MSVC_RUNTIME_LIBRARY "MultiThreaded$<$<CONFIG:Debug>:Debug>")
endif()
target_link_libraries(swa PRIVATE
    swi
    swc
    pthread
)
target_link_directories(swa PRIVATE
    build/linux/x86_64/release
)
target_link_options(swa PRIVATE
    -m64
)
if(Clang)
target_link_options(swa PRIVATE
    -lc++abi
)
endif()
target_sources(swa PRIVATE
    cli/main.cpp
)

# target
add_library(swallow_base STATIC "")
set_target_properties(swallow_base PROPERTIES OUTPUT_NAME "swallow_base")
set_target_properties(swallow_base PROPERTIES ARCHIVE_OUTPUT_DIRECTORY "${CMAKE_SOURCE_DIR}/build/linux/x86_64/release")
target_compile_options(swallow_base PRIVATE
    $<$<COMPILE_LANGUAGE:C>:-m64>
    $<$<COMPILE_LANGUAGE:CXX>:-m64>
    $<$<COMPILE_LANGUAGE:C>:-DNDEBUG>
    $<$<COMPILE_LANGUAGE:CXX>:-DNDEBUG>
)
set_target_properties(swallow_base PROPERTIES CXX_EXTENSIONS OFF)
target_compile_features(swallow_base PRIVATE cxx_std_20)
if(MSVC)
    target_compile_options(swallow_base PRIVATE $<$<CONFIG:Release>:-O2>)
else()
    target_compile_options(swallow_base PRIVATE -O3)
endif()
if(MSVC)
else()
    target_compile_options(swallow_base PRIVATE -fvisibility=hidden)
endif()
if(MSVC)
    set_property(TARGET swallow_base PROPERTY
        MSVC_RUNTIME_LIBRARY "MultiThreaded$<$<CONFIG:Debug>:Debug>")
endif()
target_link_options(swallow_base PRIVATE
    -m64
)
target_sources(swallow_base PRIVATE
    base/base.cpp
)

# target
add_library(swc STATIC "")
set_target_properties(swc PROPERTIES OUTPUT_NAME "swc")
set_target_properties(swc PROPERTIES ARCHIVE_OUTPUT_DIRECTORY "${CMAKE_SOURCE_DIR}/build/linux/x86_64/release")
target_include_directories(swc PRIVATE
    compiler
)
target_include_directories(swc SYSTEM PRIVATE
    /home/muqiu/.xmake/packages/t/tl_optional/v1.1.0/c98c96f6367f4230ab618e8e653468c7/include
    /home/muqiu/.xmake/packages/t/tl_expected/v1.1.0/57774aec28a24eb8b84e9c45d2905d73/include
    /home/muqiu/.xmake/packages/s/spdlog/v1.14.1/6a0109080d85439d985a75b8a212f96a/include
)
target_compile_options(swc PRIVATE
    $<$<COMPILE_LANGUAGE:C>:-m64>
    $<$<COMPILE_LANGUAGE:CXX>:-m64>
    $<$<COMPILE_LANGUAGE:C>:-DNDEBUG>
    $<$<COMPILE_LANGUAGE:CXX>:-DNDEBUG>
)
if(Clang)
target_compile_options(swc PRIVATE
    $<$<COMPILE_LANGUAGE:CXX>:-stdlib=libc++>
)
endif()
set_target_properties(swc PROPERTIES CXX_EXTENSIONS OFF)
target_compile_features(swc PRIVATE cxx_std_20)
if(MSVC)
    target_compile_options(swc PRIVATE $<$<CONFIG:Release>:-O2>)
else()
    target_compile_options(swc PRIVATE -O3)
endif()
if(MSVC)
else()
    target_compile_options(swc PRIVATE -fvisibility=hidden)
endif()
if(MSVC)
    set_property(TARGET swc PROPERTY
        MSVC_RUNTIME_LIBRARY "MultiThreaded$<$<CONFIG:Debug>:Debug>")
endif()
target_link_libraries(swc PRIVATE
    pthread
)
target_link_options(swc PRIVATE
    -m64
)
if(Clang)
target_link_options(swc PRIVATE
    -lc++abi
)
endif()
target_sources(swc PRIVATE
    compiler/compiler.cpp
    compiler/ast/ast.cpp
    compiler/ast/dump.cpp
    compiler/ast/gmachine.cpp
    compiler/ast/type.cpp
    compiler/diagnostics/diagnostics.cpp
    compiler/diagnostics/utils.cpp
    compiler/diagnostics/reporter.cpp
    compiler/gmachine/binop.cpp
    compiler/gmachine/environment.cpp
    compiler/gmachine/instruction.cpp
    compiler/ir/context.cpp
    compiler/lexer/flex_lexer.cpp
    compiler/lexer/lexer.cpp
    compiler/parser/bison_parser.cpp
    compiler/parser/parser.cpp
    compiler/runtime/node.cpp
    compiler/runtime/runtime.cpp
    compiler/runtime/stack.cpp
    compiler/type/dump.cpp
    compiler/type/environment.cpp
    compiler/type/type.cpp
)

# target
add_library(swi STATIC "")
set_target_properties(swi PROPERTIES OUTPUT_NAME "swi")
set_target_properties(swi PROPERTIES ARCHIVE_OUTPUT_DIRECTORY "${CMAKE_SOURCE_DIR}/build/linux/x86_64/release")
add_dependencies(swi swc)
target_compile_options(swi PRIVATE
    $<$<COMPILE_LANGUAGE:C>:-m64>
    $<$<COMPILE_LANGUAGE:CXX>:-m64>
    $<$<COMPILE_LANGUAGE:C>:-DNDEBUG>
    $<$<COMPILE_LANGUAGE:CXX>:-DNDEBUG>
)
set_target_properties(swi PROPERTIES CXX_EXTENSIONS OFF)
target_compile_features(swi PRIVATE cxx_std_20)
if(MSVC)
    target_compile_options(swi PRIVATE $<$<CONFIG:Release>:-O2>)
else()
    target_compile_options(swi PRIVATE -O3)
endif()
if(MSVC)
else()
    target_compile_options(swi PRIVATE -fvisibility=hidden)
endif()
if(MSVC)
    set_property(TARGET swi PROPERTY
        MSVC_RUNTIME_LIBRARY "MultiThreaded$<$<CONFIG:Debug>:Debug>")
endif()
target_link_libraries(swi PRIVATE
    swc
    pthread
)
target_link_directories(swi PRIVATE
    build/linux/x86_64/release
)
target_link_options(swi PRIVATE
    -m64
)
if(Clang)
target_link_options(swi PRIVATE
    -lc++abi
)
endif()
target_sources(swi PRIVATE
    repl/main.cpp
)

