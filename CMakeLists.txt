# this is the build file for project swallow
# it is autogenerated by the xmake build system.
# do not edit by hand.

# project
cmake_minimum_required(VERSION 3.15.0)
cmake_policy(SET CMP0091 NEW)
project(swallow VERSION 0.0.1 LANGUAGES CXX)

# target
add_executable(swa "")
set_target_properties(swa PROPERTIES OUTPUT_NAME "swa")
set_target_properties(swa PROPERTIES RUNTIME_OUTPUT_DIRECTORY "${CMAKE_SOURCE_DIR}/build/linux/x86_64/debug")
add_dependencies(swa swc swi)
target_include_directories(swa PRIVATE
    compiler
)
target_compile_options(swa PRIVATE
    $<$<COMPILE_LANGUAGE:C>:-m64>
    $<$<COMPILE_LANGUAGE:CXX>:-m64>
)
set_target_properties(swa PROPERTIES CXX_EXTENSIONS OFF)
target_compile_features(swa PRIVATE cxx_std_20)
if(MSVC)
    target_compile_options(swa PRIVATE $<$<CONFIG:Debug>:-Od>)
else()
    target_compile_options(swa PRIVATE -O0)
endif()
if(MSVC)
    target_compile_options(swa PRIVATE -Zi)
else()
    target_compile_options(swa PRIVATE -g)
endif()
if(MSVC)
    set_property(TARGET swa PROPERTY
        MSVC_RUNTIME_LIBRARY "MultiThreaded$<$<CONFIG:Debug>:Debug>")
endif()
target_link_libraries(swa PRIVATE
    swi
    swc
)
target_link_directories(swa PRIVATE
    build/linux/x86_64/debug
)
target_link_options(swa PRIVATE
    -m64
    clang::-stdlib=libc++
)
target_sources(swa PRIVATE
    cli/main.cpp
)

# target
add_library(swallow_base STATIC "")
set_target_properties(swallow_base PROPERTIES OUTPUT_NAME "swallow_base")
set_target_properties(swallow_base PROPERTIES ARCHIVE_OUTPUT_DIRECTORY "${CMAKE_SOURCE_DIR}/build/linux/x86_64/debug")
target_compile_options(swallow_base PRIVATE
    $<$<COMPILE_LANGUAGE:C>:-m64>
    $<$<COMPILE_LANGUAGE:CXX>:-m64>
)
set_target_properties(swallow_base PROPERTIES CXX_EXTENSIONS OFF)
target_compile_features(swallow_base PRIVATE cxx_std_20)
if(MSVC)
    target_compile_options(swallow_base PRIVATE $<$<CONFIG:Debug>:-Od>)
else()
    target_compile_options(swallow_base PRIVATE -O0)
endif()
if(MSVC)
    target_compile_options(swallow_base PRIVATE -Zi)
else()
    target_compile_options(swallow_base PRIVATE -g)
endif()
if(MSVC)
    set_property(TARGET swallow_base PROPERTY
        MSVC_RUNTIME_LIBRARY "MultiThreaded$<$<CONFIG:Debug>:Debug>")
endif()
target_link_options(swallow_base PRIVATE
    -m64
)
target_sources(swallow_base PRIVATE
    base/base.cpp
)

# target
add_library(swallow_compiler_ast STATIC "")
set_target_properties(swallow_compiler_ast PROPERTIES OUTPUT_NAME "swallow_compiler_ast")
set_target_properties(swallow_compiler_ast PROPERTIES ARCHIVE_OUTPUT_DIRECTORY "${CMAKE_SOURCE_DIR}/build/linux/x86_64/debug")
target_include_directories(swallow_compiler_ast PRIVATE
    compiler
)
target_compile_options(swallow_compiler_ast PRIVATE
    $<$<COMPILE_LANGUAGE:C>:-m64>
    $<$<COMPILE_LANGUAGE:CXX>:-m64>
)
set_target_properties(swallow_compiler_ast PROPERTIES CXX_EXTENSIONS OFF)
target_compile_features(swallow_compiler_ast PRIVATE cxx_std_20)
if(MSVC)
    target_compile_options(swallow_compiler_ast PRIVATE $<$<CONFIG:Debug>:-Od>)
else()
    target_compile_options(swallow_compiler_ast PRIVATE -O0)
endif()
if(MSVC)
    target_compile_options(swallow_compiler_ast PRIVATE -Zi)
else()
    target_compile_options(swallow_compiler_ast PRIVATE -g)
endif()
if(MSVC)
    set_property(TARGET swallow_compiler_ast PROPERTY
        MSVC_RUNTIME_LIBRARY "MultiThreaded$<$<CONFIG:Debug>:Debug>")
endif()
target_link_options(swallow_compiler_ast PRIVATE
    -m64
    clang::-stdlib=libc++
)
target_sources(swallow_compiler_ast PRIVATE
    compiler/ast/dump.cpp
    compiler/ast/ast.cpp
    compiler/ast/type.cpp
    compiler/ast/gmachine.cpp
)

# target
add_library(swallow_compiler_diagnostics STATIC "")
set_target_properties(swallow_compiler_diagnostics PROPERTIES OUTPUT_NAME "swallow_compiler_diagnostics")
set_target_properties(swallow_compiler_diagnostics PROPERTIES ARCHIVE_OUTPUT_DIRECTORY "${CMAKE_SOURCE_DIR}/build/linux/x86_64/debug")
target_include_directories(swallow_compiler_diagnostics PRIVATE
    compiler
)
target_compile_options(swallow_compiler_diagnostics PRIVATE
    $<$<COMPILE_LANGUAGE:C>:-m64>
    $<$<COMPILE_LANGUAGE:CXX>:-m64>
)
set_target_properties(swallow_compiler_diagnostics PROPERTIES CXX_EXTENSIONS OFF)
target_compile_features(swallow_compiler_diagnostics PRIVATE cxx_std_20)
if(MSVC)
    target_compile_options(swallow_compiler_diagnostics PRIVATE $<$<CONFIG:Debug>:-Od>)
else()
    target_compile_options(swallow_compiler_diagnostics PRIVATE -O0)
endif()
if(MSVC)
    target_compile_options(swallow_compiler_diagnostics PRIVATE -Zi)
else()
    target_compile_options(swallow_compiler_diagnostics PRIVATE -g)
endif()
if(MSVC)
    set_property(TARGET swallow_compiler_diagnostics PROPERTY
        MSVC_RUNTIME_LIBRARY "MultiThreaded$<$<CONFIG:Debug>:Debug>")
endif()
target_link_options(swallow_compiler_diagnostics PRIVATE
    -m64
    clang::-stdlib=libc++
)
target_sources(swallow_compiler_diagnostics PRIVATE
    compiler/diagnostics/utils.cpp
    compiler/diagnostics/diagnostics.cpp
    compiler/diagnostics/reporter.cpp
)

# target
add_library(swallow_compiler_gmachine STATIC "")
set_target_properties(swallow_compiler_gmachine PROPERTIES OUTPUT_NAME "swallow_compiler_gmachine")
set_target_properties(swallow_compiler_gmachine PROPERTIES ARCHIVE_OUTPUT_DIRECTORY "${CMAKE_SOURCE_DIR}/build/linux/x86_64/debug")
target_include_directories(swallow_compiler_gmachine PRIVATE
    compiler
)
target_compile_options(swallow_compiler_gmachine PRIVATE
    $<$<COMPILE_LANGUAGE:C>:-m64>
    $<$<COMPILE_LANGUAGE:CXX>:-m64>
)
set_target_properties(swallow_compiler_gmachine PROPERTIES CXX_EXTENSIONS OFF)
target_compile_features(swallow_compiler_gmachine PRIVATE cxx_std_20)
if(MSVC)
    target_compile_options(swallow_compiler_gmachine PRIVATE $<$<CONFIG:Debug>:-Od>)
else()
    target_compile_options(swallow_compiler_gmachine PRIVATE -O0)
endif()
if(MSVC)
    target_compile_options(swallow_compiler_gmachine PRIVATE -Zi)
else()
    target_compile_options(swallow_compiler_gmachine PRIVATE -g)
endif()
if(MSVC)
    set_property(TARGET swallow_compiler_gmachine PROPERTY
        MSVC_RUNTIME_LIBRARY "MultiThreaded$<$<CONFIG:Debug>:Debug>")
endif()
target_link_options(swallow_compiler_gmachine PRIVATE
    -m64
    clang::-stdlib=libc++
)
target_sources(swallow_compiler_gmachine PRIVATE
    compiler/gmachine/binop.cpp
    compiler/gmachine/environment.cpp
    compiler/gmachine/instruction.cpp
)

# target
add_library(swallow_compiler_ir STATIC "")
set_target_properties(swallow_compiler_ir PROPERTIES OUTPUT_NAME "swallow_compiler_ir")
set_target_properties(swallow_compiler_ir PROPERTIES ARCHIVE_OUTPUT_DIRECTORY "${CMAKE_SOURCE_DIR}/build/linux/x86_64/debug")
target_include_directories(swallow_compiler_ir PRIVATE
    compiler
)
target_compile_options(swallow_compiler_ir PRIVATE
    $<$<COMPILE_LANGUAGE:C>:-m64>
    $<$<COMPILE_LANGUAGE:CXX>:-m64>
)
set_target_properties(swallow_compiler_ir PROPERTIES CXX_EXTENSIONS OFF)
target_compile_features(swallow_compiler_ir PRIVATE cxx_std_20)
if(MSVC)
    target_compile_options(swallow_compiler_ir PRIVATE $<$<CONFIG:Debug>:-Od>)
else()
    target_compile_options(swallow_compiler_ir PRIVATE -O0)
endif()
if(MSVC)
    target_compile_options(swallow_compiler_ir PRIVATE -Zi)
else()
    target_compile_options(swallow_compiler_ir PRIVATE -g)
endif()
if(MSVC)
    set_property(TARGET swallow_compiler_ir PROPERTY
        MSVC_RUNTIME_LIBRARY "MultiThreaded$<$<CONFIG:Debug>:Debug>")
endif()
target_link_options(swallow_compiler_ir PRIVATE
    -m64
    clang::-stdlib=libc++
)
target_sources(swallow_compiler_ir PRIVATE
    compiler/ir/context.cpp
)

# target
add_library(swallow_compiler_lexer STATIC "")
set_target_properties(swallow_compiler_lexer PROPERTIES OUTPUT_NAME "swallow_compiler_lexer")
set_target_properties(swallow_compiler_lexer PROPERTIES ARCHIVE_OUTPUT_DIRECTORY "${CMAKE_SOURCE_DIR}/build/linux/x86_64/debug")
target_include_directories(swallow_compiler_lexer PRIVATE
    compiler
)
target_compile_options(swallow_compiler_lexer PRIVATE
    $<$<COMPILE_LANGUAGE:C>:-m64>
    $<$<COMPILE_LANGUAGE:CXX>:-m64>
)
set_target_properties(swallow_compiler_lexer PROPERTIES CXX_EXTENSIONS OFF)
target_compile_features(swallow_compiler_lexer PRIVATE cxx_std_20)
if(MSVC)
    target_compile_options(swallow_compiler_lexer PRIVATE $<$<CONFIG:Debug>:-Od>)
else()
    target_compile_options(swallow_compiler_lexer PRIVATE -O0)
endif()
if(MSVC)
    target_compile_options(swallow_compiler_lexer PRIVATE -Zi)
else()
    target_compile_options(swallow_compiler_lexer PRIVATE -g)
endif()
if(MSVC)
    set_property(TARGET swallow_compiler_lexer PROPERTY
        MSVC_RUNTIME_LIBRARY "MultiThreaded$<$<CONFIG:Debug>:Debug>")
endif()
target_link_options(swallow_compiler_lexer PRIVATE
    -m64
    clang::-stdlib=libc++
)
target_sources(swallow_compiler_lexer PRIVATE
    compiler/lexer/lexer.cpp
    compiler/lexer/flex_lexer.cpp
)

# target
add_library(swallow_compiler_parser STATIC "")
set_target_properties(swallow_compiler_parser PROPERTIES OUTPUT_NAME "swallow_compiler_parser")
set_target_properties(swallow_compiler_parser PROPERTIES ARCHIVE_OUTPUT_DIRECTORY "${CMAKE_SOURCE_DIR}/build/linux/x86_64/debug")
target_include_directories(swallow_compiler_parser PRIVATE
    compiler
)
target_compile_options(swallow_compiler_parser PRIVATE
    $<$<COMPILE_LANGUAGE:C>:-m64>
    $<$<COMPILE_LANGUAGE:CXX>:-m64>
)
set_target_properties(swallow_compiler_parser PROPERTIES CXX_EXTENSIONS OFF)
target_compile_features(swallow_compiler_parser PRIVATE cxx_std_20)
if(MSVC)
    target_compile_options(swallow_compiler_parser PRIVATE $<$<CONFIG:Debug>:-Od>)
else()
    target_compile_options(swallow_compiler_parser PRIVATE -O0)
endif()
if(MSVC)
    target_compile_options(swallow_compiler_parser PRIVATE -Zi)
else()
    target_compile_options(swallow_compiler_parser PRIVATE -g)
endif()
if(MSVC)
    set_property(TARGET swallow_compiler_parser PROPERTY
        MSVC_RUNTIME_LIBRARY "MultiThreaded$<$<CONFIG:Debug>:Debug>")
endif()
target_link_options(swallow_compiler_parser PRIVATE
    -m64
    clang::-stdlib=libc++
)
target_sources(swallow_compiler_parser PRIVATE
    compiler/parser/parser.cpp
    compiler/parser/bison_parser.cpp
)

# target
add_library(swallow_compiler_runtime STATIC "")
set_target_properties(swallow_compiler_runtime PROPERTIES OUTPUT_NAME "swallow_compiler_runtime")
set_target_properties(swallow_compiler_runtime PROPERTIES ARCHIVE_OUTPUT_DIRECTORY "${CMAKE_SOURCE_DIR}/build/linux/x86_64/debug")
target_include_directories(swallow_compiler_runtime PRIVATE
    compiler
)
target_compile_options(swallow_compiler_runtime PRIVATE
    $<$<COMPILE_LANGUAGE:C>:-m64>
    $<$<COMPILE_LANGUAGE:CXX>:-m64>
)
set_target_properties(swallow_compiler_runtime PROPERTIES CXX_EXTENSIONS OFF)
target_compile_features(swallow_compiler_runtime PRIVATE cxx_std_20)
if(MSVC)
    target_compile_options(swallow_compiler_runtime PRIVATE $<$<CONFIG:Debug>:-Od>)
else()
    target_compile_options(swallow_compiler_runtime PRIVATE -O0)
endif()
if(MSVC)
    target_compile_options(swallow_compiler_runtime PRIVATE -Zi)
else()
    target_compile_options(swallow_compiler_runtime PRIVATE -g)
endif()
if(MSVC)
    set_property(TARGET swallow_compiler_runtime PROPERTY
        MSVC_RUNTIME_LIBRARY "MultiThreaded$<$<CONFIG:Debug>:Debug>")
endif()
target_link_options(swallow_compiler_runtime PRIVATE
    -m64
    clang::-stdlib=libc++
)
target_sources(swallow_compiler_runtime PRIVATE
    compiler/runtime/stack.cpp
    compiler/runtime/runtime.cpp
    compiler/runtime/node.cpp
)

# target
add_library(swallow_compiler_type STATIC "")
set_target_properties(swallow_compiler_type PROPERTIES OUTPUT_NAME "swallow_compiler_type")
set_target_properties(swallow_compiler_type PROPERTIES ARCHIVE_OUTPUT_DIRECTORY "${CMAKE_SOURCE_DIR}/build/linux/x86_64/debug")
target_include_directories(swallow_compiler_type PRIVATE
    compiler
)
target_compile_options(swallow_compiler_type PRIVATE
    $<$<COMPILE_LANGUAGE:C>:-m64>
    $<$<COMPILE_LANGUAGE:CXX>:-m64>
)
set_target_properties(swallow_compiler_type PROPERTIES CXX_EXTENSIONS OFF)
target_compile_features(swallow_compiler_type PRIVATE cxx_std_20)
if(MSVC)
    target_compile_options(swallow_compiler_type PRIVATE $<$<CONFIG:Debug>:-Od>)
else()
    target_compile_options(swallow_compiler_type PRIVATE -O0)
endif()
if(MSVC)
    target_compile_options(swallow_compiler_type PRIVATE -Zi)
else()
    target_compile_options(swallow_compiler_type PRIVATE -g)
endif()
if(MSVC)
    set_property(TARGET swallow_compiler_type PROPERTY
        MSVC_RUNTIME_LIBRARY "MultiThreaded$<$<CONFIG:Debug>:Debug>")
endif()
target_link_options(swallow_compiler_type PRIVATE
    -m64
    clang::-stdlib=libc++
)
target_sources(swallow_compiler_type PRIVATE
    compiler/type/dump.cpp
    compiler/type/environment.cpp
    compiler/type/type.cpp
)

# target
add_library(swc STATIC "")
set_target_properties(swc PROPERTIES OUTPUT_NAME "swc")
set_target_properties(swc PROPERTIES ARCHIVE_OUTPUT_DIRECTORY "${CMAKE_SOURCE_DIR}/build/linux/x86_64/debug")
target_include_directories(swc PRIVATE
    compiler
)
target_compile_options(swc PRIVATE
    $<$<COMPILE_LANGUAGE:C>:-m64>
    $<$<COMPILE_LANGUAGE:CXX>:-m64>
)
set_target_properties(swc PROPERTIES CXX_EXTENSIONS OFF)
target_compile_features(swc PRIVATE cxx_std_20)
if(MSVC)
    target_compile_options(swc PRIVATE $<$<CONFIG:Debug>:-Od>)
else()
    target_compile_options(swc PRIVATE -O0)
endif()
if(MSVC)
    target_compile_options(swc PRIVATE -Zi)
else()
    target_compile_options(swc PRIVATE -g)
endif()
if(MSVC)
    set_property(TARGET swc PROPERTY
        MSVC_RUNTIME_LIBRARY "MultiThreaded$<$<CONFIG:Debug>:Debug>")
endif()
target_link_options(swc PRIVATE
    -m64
    clang::-stdlib=libc++
)
target_sources(swc PRIVATE
    compiler/compiler.cpp
    compiler/ast/dump.cpp
    compiler/ast/ast.cpp
    compiler/ast/type.cpp
    compiler/ast/gmachine.cpp
    compiler/diagnostics/utils.cpp
    compiler/diagnostics/diagnostics.cpp
    compiler/diagnostics/reporter.cpp
    compiler/lexer/lexer.cpp
    compiler/lexer/flex_lexer.cpp
    compiler/parser/parser.cpp
    compiler/parser/bison_parser.cpp
    compiler/runtime/stack.cpp
    compiler/runtime/runtime.cpp
    compiler/runtime/node.cpp
    compiler/type/dump.cpp
    compiler/type/environment.cpp
    compiler/type/type.cpp
    compiler/ir/context.cpp
    compiler/gmachine/binop.cpp
    compiler/gmachine/environment.cpp
    compiler/gmachine/instruction.cpp
)

# target
add_library(swi STATIC "")
set_target_properties(swi PROPERTIES OUTPUT_NAME "swi")
set_target_properties(swi PROPERTIES ARCHIVE_OUTPUT_DIRECTORY "${CMAKE_SOURCE_DIR}/build/linux/x86_64/debug")
add_dependencies(swi swc)
target_compile_options(swi PRIVATE
    $<$<COMPILE_LANGUAGE:C>:-m64>
    $<$<COMPILE_LANGUAGE:CXX>:-m64>
)
set_target_properties(swi PROPERTIES CXX_EXTENSIONS OFF)
target_compile_features(swi PRIVATE cxx_std_20)
if(MSVC)
    target_compile_options(swi PRIVATE $<$<CONFIG:Debug>:-Od>)
else()
    target_compile_options(swi PRIVATE -O0)
endif()
if(MSVC)
    target_compile_options(swi PRIVATE -Zi)
else()
    target_compile_options(swi PRIVATE -g)
endif()
if(MSVC)
    set_property(TARGET swi PROPERTY
        MSVC_RUNTIME_LIBRARY "MultiThreaded$<$<CONFIG:Debug>:Debug>")
endif()
target_link_libraries(swi PRIVATE
    swc
)
target_link_directories(swi PRIVATE
    build/linux/x86_64/debug
)
target_link_options(swi PRIVATE
    -m64
    clang::-stdlib=libc++
)
target_sources(swi PRIVATE
    repl/main.cpp
)

